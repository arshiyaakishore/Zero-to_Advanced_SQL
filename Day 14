Example:
Create a stored procedure named "get_customer_orders" that takes a customer ID as input and retrieves all the orders placed by that customer.

CREATE PROCEDURE get_customer_orders(IN input_customer_id INT)
BEGIN
    -- Retrieve orders for the specified customer ID
    SELECT *
    FROM orders
    WHERE customer_id = input_customer_id;
END;


Practice Questions:
1. Create a trigger named "update inventory" that automatically updates the quantity in the "inventory" table when an order is placed.
2. Create a user-defined function named "calculate_discount" that takes the order total as input and returns the discount amount based on specific conditions.
3. Write a SQL query to optimize a slow-performing query by adding appropriate indexes and rewriting the query structure.

#1
CREATE TRIGGER update_inventory
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
    UPDATE inventory
    SET quantity = quantity - NEW.order_quantity
    WHERE product_id = NEW.product_id;
END;

#2
CREATE FUNCTION calculate_discount(order_total DECIMAL(10, 2)) RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE discount DECIMAL(10, 2);
    -- Set default discount to 0
    SET discount = 0;
    -- Apply discount based on conditions
    IF order_total > 1000 THEN
        SET discount = order_total * 0.1; -- 10% discount for orders over 1000
    ELSEIF order_total > 500 THEN
        SET discount = order_total * 0.05; -- 5% discount for orders over 500
    END IF;

    RETURN discount;
END;

#3

